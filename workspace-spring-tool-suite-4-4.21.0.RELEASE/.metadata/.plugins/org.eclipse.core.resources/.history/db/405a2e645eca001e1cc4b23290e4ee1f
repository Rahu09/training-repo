package com.hexa.samplejpa.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.HttpMethod;
import org.springframework.security.config.Customizer;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.provisioning.InMemoryUserDetailsManager;
import org.springframework.security.web.SecurityFilterChain;

@Configuration
public class SpringSecurityConfig {
	
	@Bean
	public static PasswordEncoder passwordEncoder() {
		return new BCryptPasswordEncoder();
	}
	
	@Bean
	InMemoryUserDetailsManager userDetailsService() {
		
		UserDetails rahul = User.builder()
				.username("rahul")
				.password(passwordEncoder().encode("root"))
				.roles("USER")
				.build();
		
		UserDetails admin = User.builder()
				.username("admin")
				.password(passwordEncoder().encode("root"))
				.roles("ADMIN")
				.build();
		
		return new InMemoryUserDetailsManager(rahul,admin);
	}


    @Bean
    SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
		
		http
		.csrf(
				csrf->csrf.disable()	
		).authorizeHttpRequests(
				(auth)->auth.requestMatchers(HttpMethod.POST, "**/api/v1/productapp/addProduct**").hasRole("ADMIN")
				.anyRequest().authenticated()
		).httpBasic(
				Customizer.withDefaults()
		);
		
		return http.build();
	}
}
